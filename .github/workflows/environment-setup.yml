name: Setup the Python Environment

on: workflow_call

jobs:
  setup:
    name: setup
    runs-on: ${{ matrix.os }}
    env:
      COML_DEBUG: 1
      PYTHONIOENCODING: 'utf-8'

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: [3.7, 3.8]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Delete error-causing bash
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        run: rm.exe "C:/WINDOWS/system32/bash.EXE"

      - name: Set path to bash for example runner
        shell: bash
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          echo "SHELL_EXECUTABLE=C:\Program Files\Git\bin\bash.exe" >> $GITHUB_ENV
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2.1.6
        with:
          path: |
            .venv
            poetry.lock
          # Cache the complete venv dir for a given os, python version, pyproject.toml
          key: venv-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Install Project
        shell: bash
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install